//Connected modules:
int LedRG = 13;                       //Pin commanding Red and Green Led
int LDR = 14;                         //Pin receiving LDR value

//Tram info:
  /*Header info*/
const int HeaderLength = 6;
int header[HeaderLength] = {'%','&','D','D','A','P'};
  /*Footer info*/
const int FooterLength = 3;
int footer[FooterLength] = {'@',':','@'};
  /*Nack's body info*/
const int bodyNacklength = 3;
int bodyNack[bodyNacklength] = {'*','?','$'};
  /*Footer info*/
const int bodyLuxlength = 4;
int bodyLux[bodyLuxlength] = {'*','V','V','$'};

//General info it receives:
int ReceivedTrameInformation = 0;
int LuxValue;

/*--------------------------------------------------------------------------------*/

/* -==  My stack structure to stock the Trame it receives  ==- */

//Might be better to put it in a .h file. As arduino sometimes compiles functions before structures.

typedef struct ElementTrameStructure{
  int Byte;
  struct ElementTrameStructure * next = NULL;
}ElementTrame;

/* Function to create the structure which will stock the Trame */

ElementTrame* init_tram(){
  ElementTrame* elementtrame = (ElementTrame*)malloc(sizeof(ElementTrame));
  if(elementtrame == NULL){
    exit(EXIT_FAILURE);
  }
  elementtrame->Byte = 0;
  elementtrame->next = NULL;
  return elementtrame;
}

/* Function to remove the first element of the Trame list */

void pop(ElementTrame ** toptrame){
  ElementTrame * nextElementTrame = NULL;
  if(toptrame == NULL){
    exit(EXIT_FAILURE);
  }
  nextElementTrame = (*toptrame)->next;
  free(*toptrame);
  *toptrame = nextElementTrame;
  return;
}

/* Function to add elemenent to Trame list */
void pileup(ElementTrame ** toptrame, int incomingByte){
  ElementTrame* newElementTrame;
  newElementTrame = (ElementTrame*)malloc(sizeof(ElementTrame));
  
  newElementTrame->Byte = incomingByte;
  newElementTrame->next = *toptrame;
  *toptrame = newElementTrame;
  return;
}

/*--------------------------------------------------------------------------------*/

/* -==  Receiving a Trame / Getting the info  ==- */

/* function that receives the message */

int receive_message(){
  int error = 0;
  int response;   // 0: Time out / 1: Header error / 2: Footer error / 3: Error in the received Trame / 4: The info isn't recognised by our software / 5: info - Manual / 6: info - Nack / 7: info - Ack 
  int i = 0;
  int incomingByte = 0;
  //It waits to receive the start of the Trames
  while(incomingByte != header[0] && i<1000){
    incomingByte = Serial.read();
    i++;
  }
  //Checks if it didn't timeout
  Serial.print("Receiving Byte: ");
  Serial.print(incomingByte);
  Serial.print(" ");
  if(i<1000){
    //Checks the 'HeaderLength' first element of the beginning of the trame
    for(i=0;i<HeaderLength-1;i++){
      incomingByte = Serial.read();
      Serial.print(incomingByte);
      Serial.print(" ");
      if(incomingByte != header[1+i]){
        error = 1; //error from header
      }
    }
    //If i != we can check the rest of the trame
    if( error == 0 ){
      ElementTrame* TrameReception = init_tram();
      while((Serial.available() > 0) && (error == 0)){
        incomingByte = Serial.read();
        pileup(&TrameReception,incomingByte);
        Serial.print(TrameReception->Byte);
        Serial.print(" ");
        if(incomingByte == footer[0]){
          for(i=1;(i<FooterLength);i++){
            incomingByte = Serial.read();
            pileup(&TrameReception,incomingByte);
            Serial.print(TrameReception->Byte);
            Serial.print(" ");
            if(footer[i] == incomingByte){
              if(i == (FooterLength-1)){error = 1;}
            }
          }
        }
      }
      if(error == 1){
        for(i=0;i<3;i++){
          pop(&TrameReception);
        }
        response = AnalyseTrame(TrameReception); // Analyse the Trame
      }else{
        response = 2; // Footer error
      }  
    }else{
      response = 1; // Header error
    }
  }else{
    response = 0; // Time out
  }
  Serial.println("");
  return response;
}

/* function to extract the trame info / check it */

int AnalyseTrame(ElementTrame* Trame){
  int response;
  int Information = 0;
  int ExpectedLength;
  int Length = 0;
  ElementTrame* TrameChecked = init_tram();
  //the 2 last Byte tells us the expected length of the Tram body length in byte
  ExpectedLength = (Trame->Byte) - 48;
  pop(&Trame);
  ExpectedLength = ((Trame->Byte) - 48) * 10 + ExpectedLength;
  pop(&Trame);
  ExpectedLength = ExpectedLength - HeaderLength - FooterLength + 1 - 2;
  Serial.println("");
  Serial.print("Expected Length of the Trame's body : ");
  Serial.println(ExpectedLength);
  //It first checks if it received the full trame, by checking the lenght accordingly to the bit of control. And it put the first received byte at the top of the stack.
  while(Trame->next != NULL){
    Length++;
    pileup(&TrameChecked,Trame->Byte);
    pop(&Trame);
  }
  Serial.print("Actual length : ");
  Serial.print(Length);
  if(Length == ExpectedLength){
    //Extracts one Byte. the possible info that can be received, can be stored in one Byte. We could have made a list of the info received, which are seperated by '+' between each other
    pop(&TrameChecked); //Removes the * Byte
    Information = TrameChecked->Byte;
    if((Information == '!') || (Information == 21)){
      response = 7; //info: Ack
    }else{
      if(Information == '?'){
        response = 6; //info: Nack
      }else{
        if((Information == '#') || (Information == 23)){
          response = 5; //info: Manual
        }else{
          response = 4; //The info isn't recognised by our software
        }
      }
    }
  }else{
    response = 3; //The Tram has missing info
  }
  return response;
}

/* functions that communicates the type of info it received */

void ReceivedInfoFromTrame(int Information){
  // 0: Time out / 1: Header error / 2: Footer error / 3: Error in the received Trame / 4: The info isn't recognised by our software / 5: info - Manual / 6: info - Nack / 7: info - Ack
  if(Information == 0){
    Serial.print("ReceivedTrameInformation: Time out");
  }else{
    if(Information == 1){
      Serial.print("ReceivedTrameInformation: Header error");
    }else{
      if(Information == 2){
        Serial.print("ReceivedTrameInformation: Footer error");
      }else{
        if(Information == 3){
          Serial.print("ReceivedTrameInformation: Error in the received Trame");
        }else{
          if(Information == 4){
            Serial.print("ReceivedTrameInformation: The info isn't recognised by our software");
          }else{
            if(Information == 5){
              Serial.print("ReceivedTrameInformation: info - Manual");
            }else{
              if(Information == 6){
                Serial.print("ReceivedTrameInformation: info - Nack");
              }else{
                if(Information == 7){
                  Serial.print("ReceivedTrameInformation: info - Ack");
                }else{
                  Serial.print("ReceivedTrameInformation: UNKNOWN");
                }
              }
            }
          }
        }
      }
    }
  }
  Serial.print(" - ");
  Serial.println(Information);
}

/*--------------------------------------------------------------------------------*/

/* -==  Receiving a Trame / Getting the info  ==- */

void SendTrame(ElementTrame* Trame){
  Serial.print("Sending trame : ");
  while(Trame->next != NULL){
    //This is the only usefull serial print !!
    Serial.print(Trame->Byte);
    Serial.print(" ");
    pop(&Trame);
  }
  Serial.println("");
  pop(&Trame);
}

ElementTrame* FormTrame(int* body, int bodylength){
  ElementTrame* Trame = init_tram();
  int i;
  int tramelength;
  //add foot of Trame:
  for(i=0;i<FooterLength;i++){
    pileup(&Trame,footer[FooterLength-i-1]);
  }
  tramelength = FooterLength+HeaderLength+bodylength;
  pileup(&Trame,tramelength % 10);
  pileup(&Trame,(tramelength - tramelength % 10) / 10);
  //add body
  for(i=0;i<bodylength;i++){
    pileup(&Trame,body[bodylength-i-1]);
  }
  //add foot
  for(i=0;i<HeaderLength-1;i++){
    pileup(&Trame,header[HeaderLength-i-1]);
  }
  return Trame;
}

/*--------------------------------------------------------------------------------*/
int GetLux(){
  return 0;
};

/*--------------------------------------------------------------------------------*/

int TramReception(int info){
  Serial.println("Waiting to get an information other than common errors.");
  //Waiting to get an information other than common errors.
  info = receive_message();
  ReceivedInfoFromTrame(info);
  if(info < 5){
    SendTrame(FormTrame(bodyNack,bodyNacklength));
    info = TramReception(info);
  }
  return info;
}

/* Checks if it's not in Manuel mode */

void ManualTest(int Information){
  while(Information < 6){
    Serial.println("Checking if out of manuel mode: ");
    //turn led red
    //check Reception
    Information = receive_message();
    ReceivedInfoFromTrame(Information);
  }
}

/*--------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------
    Expected TRAM:
      So you can test on your SERIAL without the other board:
        
          Ack:  %&DDAP*!$13@:@
          Nack: %&DDAP*?$13@:@
          Man:  %&DDAP*#$13@:@

       other quick test:

          header error: %&DAAP*#$13@:@
          footer error: %&DDAP*#$13
          damaged tram: %&DDAP*asdavhsdfgâ‚¬$13@:@
          wrong info:   %&DDAP*#$13@:@

    Progress:
      -ReceivedInfoFromTrame(receive_message());
              Works perfectly -> Stack structure and Receiving a Trame / Getting the info are working
      -SendTrame and FormTrame works perfectly with the pop function error removed
      -
          


----------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------------*/

/* -==  Setup  ==- */

void setup() {
  //setup code, runs once :
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  Serial.println("Starting Software :");
  int i;
  for(i=10;i>0;i--){
    delay(1000);
    Serial.print(i);
    Serial.print(", ");
  }
  delay(1000);
  Serial.println(i);
  Serial.println("Starting the loop()");
  ReceivedTrameInformation = receive_message();
}

/*--------------------------------------------------------------------------------*/
  
void loop() {
  // main code, runs repeatedly :
  // 0: Time out / 1: Header error / 2: Footer error / 3: Error in the received Trame / 4: The info isn't recognised by our software / 5: info - Manual / 6: info - Nack / 7: info - Ack
  int i;
  //Loop to send Lux value, while the information received isn't Ack.
  do{
    if(ReceivedTrameInformation==5){ManualTest(ReceivedTrameInformation);}
    LuxValue = GetLux();
    bodyLux[1] = 'V';
    bodyLux[2] = 'V';
    Serial.println("Sending lux Value: ");
    SendTrame(FormTrame(bodyLux,bodyLuxlength));
    ReceivedTrameInformation = TramReception(ReceivedTrameInformation);
  }while(ReceivedTrameInformation != 7);
  Serial.println("Message was received.");
  //waits 15sec before starting over
  for(i=0;(i<15)&&(ReceivedTrameInformation!=5);i++){
    delay(1000);
    ReceivedTrameInformation = receive_message();
  }
  Serial.println("15 seconds are over");
}
