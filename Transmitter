int LedRG = 13;   //Pin commanding Red and Green Led
int LDR = 14;     //Pin receiving LDR value
int HeaderLength = 6;
int FooterLenght = 3;
int header[6] = {'%','&','D','D','A','P'};
int footer[3] = {'@',':','@'};

/*--------------------------------------------------------------------------------*/

/* -==  My stack structure to stock the Trame it receives  ==- */

//Might be better to put it in a .h file. As arduino sometimes compiles functions before structures.
typedef struct ElementTrameStructure ElementTrame;
struct ElementTrameStructure{
  int Byte;
  ElementTrame* suivant = NULL;
};

/* Function to create the structure which will stock the Trame */

ElementTrame* init_tram(){
  ElementTrame* elementtrame = malloc(sizeof(*elementtrame));
  if(elementtrame == NULL){
    exit(EXIT_FAILURE);
  }
  elementtrame->suivant = NULL;
  elementtrame->Byte = '%';
  return elementtrame;
}

/* Function to remove the first element of the Trame list */

void pop(ElementTrame * toptrame){
  
  if(toptrame == NULL){
    exit(EXIT_FAILURE);
  }
  ElementTrame * TrameDelete;
  TrameDelete = toptrame;
  toptrame = toptrame->suivant;
  free(TrameDelete);
}

/* Function to add elemenent to Trame list */
void pileup(ElementTrame * toptrame, int incomingByte){
  ElementTrame * newElementTrame = malloc(sizeof(*newElementTrame ));
  if(newElementTrame == NULL){
    exit(EXIT_FAILURE);
  }
  newElementTrame->Byte = incomingByte;
  newElementTrame->suivant = toptrame;
  toptrame = newElementTrame;
}

/*--------------------------------------------------------------------------------*/

/* -==  Setup  ==- */

void setup() {
  //setup code, runs once :
  Serial.begin(9600);
}

/*--------------------------------------------------------------------------------*/

/* -==  Receiving a Trame / Getting the info  ==- */

/* function that receives the message */

int receive_message(){
  int response; // 0: Time out / 1: Header error / 2: Footer error
  int i = 0;
  int j = 0;
  int incomingByte = NULL;
  //It waits to receive the start of the Trames
  while(incomingByte != header[0] && i<1000){
    incomingByte = Serial.read();
    i++;
  }
  //Checks if it didn't timeout
  if(i<1000){
    //Checks the 'HeaderLength' first element of the beginning of the trame
    for(i=0;i<HeaderLength-1;i++){
      if(Serial.read() != header[1+i]){
        i = 10; //error from header
      }
    }
    //If i != we can check the rest of the trame
    if( i != 10 ){
      ElementTrame* TrameReception = init_tram();
      while((Serial.available() > 0) && (i!=2)){
        incomingByte = Serial.read();
        pileup(TrameReception,incomingByte);
        if(incomingByte == footer[0]){
          i = 0;
          while((i<FooterLenght) && (incomingByte!=footer[i])){
            incomingByte = Serial.read();
            pileup(TrameReception,incomingByte);
            i++;
          }
        }
      }
      if(i==2){
        for(j=0;j<3;j++){
          pop(TrameReception);
        }
        response = AnalyseTrame(TrameReception);
      }else{
        response = 2; // Footer error
      }
    }else{
    //If i = 10 the the header had a problem
      response = 1; // Header error
    }
  }else{
    response = 0; // Time out
  }
  return response;
}

/* function to extract the trame info / check it */

int AnalyseTrame(ElementTrame* Trame){
  
}
